events {}
http {
    upstream web-app { #round robin
        server apm-app_web-app_1:8080;
        server apm-app_web-app_2:8080;
    }

    upstream backend-ip-hash { #ip_hash
        ip_hash; # same ip goes to same server
        server apm-app_web-app_1:8080 max_fails=1 fail_timeout=3s;
        server apm-app_web-app_2:8080;
    }

    upstream backend-least-conn { #least_conn
        least_conn; # req sent to server with least active conn., with server weights
        server apm-app_web-app_1:8080 weight=5;
        server apm-app_web-app_2:8080;
    }

    # upstream backend-generic-hash { #hash
    #     hash $request_uri consistent; # 
    #     server apm-app_web-app_1:8080 weight=5;
    #     server apm-app_web-app_2:8080;
    # }

    # upstream backend-least-time { #least_time
    #     least_time header;
    #     server apm-app_web-app_1:8080;
    #     server apm-app_web-app_2:8080;
    # }

    # upstream backend { #random, but with weights and least_XY consideration 
    #     #replicas in docker-compose has to be 4....
    #     random two least_time=last_byte;
    #     server apm-app_web-app_1:8080;
    #     server apm-app_web-app_2:8080;
    #     server apm-app_web-app_3:8080;
    #     server apm-app_web-app_4:8080;
    # }

    # upstream backend-weights-and-backup { #weights 5 > 1, use backup then, when others are unavailable
    #     server apm-app_web-app_1:8080 weight=5;
    #     server apm-app_web-app_2:8080;
    #     server apm-app_web-app_3:8080 backup;
    # }

    server {
        listen 8080;
        location / {
            # proxy_pass http://web-app;
            proxy_pass http://backend-ip-hash;
            # health_check port=8080;
        }
    }
}